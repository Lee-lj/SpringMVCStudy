
快速生成web.xml的配置信息:
    <servlet>
	    <servlet-name>SpringDispatcherServlet</servlet-name><!-- 名字与servlet的映射mapper文件映射 -->
	    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class><!-- 
	    	class就是 DispatcherServlet中的全类名 -->
	    	
	    <init-param><!-- 说明springmvc.xml配置文件在哪里 -->
	    	<param-name>contextConfigLocation</param-name><!-- contextConfigLocation是类中的查找xml文件的方法 -->
	    	<param-value>classpath:springmvc.xml</param-value>
	    </init-param>
	    <load-on-startup>1</load-on-startup><!-- 让项目启动时自动加载 -->
    </servlet>

	<servlet-mapping>
		<servlet-name>SpringDispatcherServlet</servlet-name><!-- 为这个servlet起名 -->
		<url-pattern>/</url-pattern><!-- servlet拦截的范围 / 是全部 -->
	</servlet-mapping>
	
	方法:web.xml中alt+/ DesipatcherServlet，只需要改动Location(springmvc.xml所在的路径)，和url中的拦截类型
	<!-- The front controller of this Spring Web application, responsible for handling all application requests -->
	<servlet>
		<servlet-name>springDispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>location</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!-- Map all requests to the DispatcherServlet for handling -->
	<servlet-mapping>
		<servlet-name>springDispatcherServlet</servlet-name>
		<url-pattern>url</url-pattern>
	</servlet-mapping>
	
	SpringMVC.xml默认存储路径:/WEB-INF/servlet的名-servlet.xml,这里name是springDispatcherServlet，那麽对应的路径就是/WEB-INF/springDispatcherServlet-servlet.xml
	<servlet-name>springDispatcherServlet</servlet-name>
	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>